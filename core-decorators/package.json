{
  "_args": [
    [
      {
        "raw": "core-decorators@^0.17.0",
        "scope": null,
        "escapedName": "core-decorators",
        "name": "core-decorators",
        "rawSpec": "^0.17.0",
        "spec": ">=0.17.0 <0.18.0",
        "type": "range"
      },
      "D:\\workspace\\kirraapp\\node_modules\\fb"
    ]
  ],
  "_from": "core-decorators@>=0.17.0 <0.18.0",
  "_id": "core-decorators@0.17.0",
  "_inCache": true,
  "_location": "/core-decorators",
  "_nodeVersion": "7.7.1",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/core-decorators-0.17.0.tgz_1491232604434_0.660233415896073"
  },
  "_npmUser": {
    "name": "jayphelps",
    "email": "hello@jayphelps.com"
  },
  "_npmVersion": "4.1.2",
  "_phantomChildren": {},
  "_requested": {
    "raw": "core-decorators@^0.17.0",
    "scope": null,
    "escapedName": "core-decorators",
    "name": "core-decorators",
    "rawSpec": "^0.17.0",
    "spec": ">=0.17.0 <0.18.0",
    "type": "range"
  },
  "_requiredBy": [
    "/fb"
  ],
  "_resolved": "https://registry.npmjs.org/core-decorators/-/core-decorators-0.17.0.tgz",
  "_shasum": "3f43180a86d2ab0cc51069f46a1ec3e49e7cebd6",
  "_shrinkwrap": null,
  "_spec": "core-decorators@^0.17.0",
  "_where": "D:\\workspace\\kirraapp\\node_modules\\fb",
  "author": {
    "name": "Jay Phelps",
    "email": "hello@jayphelps"
  },
  "bugs": {
    "url": "https://github.com/jayphelps/core-decorators.js/issues"
  },
  "dependencies": {},
  "description": "Library of JavaScript stage-0 decorators (aka ES2016/ES7 decorators but that's not accurate!) inspired by languages that come with built-ins like @​override, @​deprecate, @​autobind, @​mixin and more! Works great with React/Angular/more!",
  "devDependencies": {
    "babel-cli": "^6.24.0",
    "babel-core": "^6.24.0",
    "babel-plugin-transform-class-properties": "^6.23.0",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "babel-plugin-transform-es2015-modules-commonjs": "^6.24.0",
    "babel-plugin-transform-flow-strip-types": "^6.22.0",
    "babel-plugin-transform-object-rest-spread": "^6.23.0",
    "babel-polyfill": "^6.23.0",
    "babel-preset-es2015": "^6.24.0",
    "camelcase": "^4.1.0",
    "chai": "^3.5.0",
    "glob": "^7.1.1",
    "global-wrap": "^2.0.0",
    "interop-require": "1.0.0",
    "lodash": "4.17.4",
    "mocha": "^3.2.0",
    "sinon": "^2.1.0",
    "sinon-chai": "^2.9.0"
  },
  "directories": {},
  "dist": {
    "shasum": "3f43180a86d2ab0cc51069f46a1ec3e49e7cebd6",
    "tarball": "https://registry.npmjs.org/core-decorators/-/core-decorators-0.17.0.tgz"
  },
  "files": [
    "es",
    "lib",
    "src",
    "README.md",
    "LICENSE"
  ],
  "gitHead": "a52d02f6ba206f6d89b879c6936b840617059ded",
  "homepage": "https://github.com/jayphelps/core-decorators.js",
  "jsnext:main": "es/core-decorators.js",
  "keywords": [
    "es6",
    "es7",
    "es2015",
    "es2016",
    "babel",
    "decorators",
    "override",
    "deprecated",
    "java",
    "annotations",
    "autobind",
    "react",
    "angular",
    "lodash",
    "mixin",
    "mixins"
  ],
  "license": "MIT",
  "main": "lib/core-decorators.js",
  "maintainers": [
    {
      "name": "jayphelps",
      "email": "hello@jayphelps.com"
    }
  ],
  "module": "es/core-decorators.js",
  "name": "core-decorators",
  "optionalDependencies": {},
  "readme": "# core-decorators.js [![Build Status](https://travis-ci.org/jayphelps/core-decorators.js.svg?branch=master)](https://travis-ci.org/jayphelps/core-decorators.js)\nLibrary of [JavaScript stage-0 decorators](https://github.com/wycats/javascript-decorators) (aka ES2016/ES7 decorators [but that's not accurate](https://medium.com/@jayphelps/please-stop-referring-to-proposed-javascript-features-as-es7-cad29f9dcc4b)) inspired by languages that come with built-ins like @​override, @​deprecate, @​autobind, @​mixin and more. Popular with React/Angular, but is framework agnostic. Similar to [Annotations in Java](https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html) but unlike Java annotations, decorators are functions which are applied at runtime.\n\nThese are stage-0 decorators because while [the decorators spec has changed](http://tc39.github.io/proposal-decorators/) and is now stage-2, no transpiler has yet to implement these changes and until they do, this library won't either.\n\n_*compiled code is intentionally not checked into this repo_\n\n### Get It\n\nA version compiled to ES5 in CJS format is published to npm as [`core-decorators`](https://www.npmjs.com/package/core-decorators)\n```bash\nnpm install core-decorators --save\n```\n\nThis can be consumed by any transpiler that supports stage-0 of the decorators spec, like [babel.js](https://babeljs.io/) version 5. *Babel 6 [does not yet support decorators natively](https://phabricator.babeljs.io/T2645), but you can include [babel-plugin-transform-decorators-legacy](https://github.com/loganfsmyth/babel-plugin-transform-decorators-legacy) or use the [`applyDecorators()` helper](#applydecorators-helper).*\n\ncore-decorators does not officially support TypeScript. There are known incompatibilities with the way it transpiles the output. PRs certainly welcome to fix that!\n\n##### Bower/globals\n\nA globals version is available [here in the artifact repo](https://github.com/jayphelps/core-decorators-artifacts), or via `$ bower install core-decorators`. It defines a global variable `CoreDecorators`, which can then be used as you might expect: `@CoreDecorators.autobind()`, etc.\n\nI *highly* recommend against using that globals build as it's quite strange you're using decorators (a proposed future feature of JavaScript) while not using ES2015 modules, a spec ratified feature used by nearly every modern framework. Also--[bower is on its deathbed](https://github.com/bower/bower/pull/1748) and IMO for very good reasons.\n\n## Decorators\n\n##### For Properties and Methods\n* [@readonly](#readonly)\n* [@nonconfigurable](#nonconfigurable)\n* [@decorate](#decorate)\n* [@extendDescriptor](#extenddescriptor) :new:\n\n##### For Properties\n* [@nonenumerable](#nonenumerable)\n* [@lazyInitialize](#lazyinitialize)\n\n##### For Methods\n* [@autobind](#autobind)\n* [@deprecate](#deprecate-alias-deprecated)\n* [@suppressWarnings](#suppresswarnings)\n* [@enumerable](#enumerable)\n* [@override](#override)\n* [@debounce](#debounce)\n* [@throttle](#throttle)\n* [@time](#time)\n* [@profile](#profile) :new:\n\n##### For Classes\n* [@autobind](#autobind)\n* [@mixin](#mixin-alias-mixins)\n\n## Helpers\n\n* [applyDecorators()](#applydecorators-helper) :new:\n\n## Docs\n\n### @autobind\n\n> Note: there is a bug in `react-hot-loader <= 1.3.0` (they fixed in [`2.0.0-alpha-4`](https://github.com/gaearon/react-hot-loader/pull/182)) which prevents this from working as expected. [Follow it here](https://github.com/jayphelps/core-decorators.js/issues/48)\n\nForces invocations of this function to always have `this` refer to the class instance, even if the function is passed around or would otherwise lose its `this` context. e.g. `var fn = context.method;` Popular with React components.\n\nIndividual methods:\n\n```js\nimport { autobind } from 'core-decorators';\n\nclass Person {\n  @autobind\n  getPerson() {\n  \treturn this;\n  }\n}\n\nlet person = new Person();\nlet { getPerson } = person;\n\ngetPerson() === person;\n// true\n```\n\nEntire Class:\n\n```js\nimport { autobind } from 'core-decorators';\n\n@autobind\nclass Person {\n  getPerson() {\n  \treturn this;\n  }\n\n  getPersonAgain() {\n    return this;\n  }\n}\n\nlet person = new Person();\nlet { getPerson, getPersonAgain } = person;\n\ngetPerson() === person;\n// true\n\ngetPersonAgain() === person;\n// true\n```\n### @readonly\n\nMarks a property or method as not being writable.\n\n```js\nimport { readonly } from 'core-decorators';\n\nclass Meal {\n  @readonly\n  entree = 'steak';\n}\n\nvar dinner = new Meal();\ndinner.entree = 'salmon';\n// Cannot assign to read only property 'entree' of [object Object]\n\n```\n\n### @override\n\nChecks that the marked method indeed overrides a function with the same signature somewhere on the prototype chain.\n\nWorks with methods and getters/setters. Will ensure name, parameter count, as well as descriptor type (accessor/data). Provides a suggestion if it finds a method with a similar signature, including slight misspellings.\n\n```js\nimport { override } from 'core-decorators';\n\nclass Parent {\n  speak(first, second) {}\n}\n\nclass Child extends Parent {\n  @override\n  speak() {}\n  // SyntaxError: Child#speak() does not properly override Parent#speak(first, second)\n}\n\n// or\n\nclass Child extends Parent {\n  @override\n  speaks() {}\n  // SyntaxError: No descriptor matching Child#speaks() was found on the prototype chain.\n  //\n  //   Did you mean \"speak\"?\n}\n```\n\n### @deprecate (alias: @deprecated)\n\nCalls `console.warn()` with a deprecation message. Provide a custom message to override the default one. You can also provide an options hash with a `url`, for further reading.\n\n```js\nimport { deprecate } from 'core-decorators';\n\nclass Person {\n  @deprecate\n  facepalm() {}\n\n  @deprecate('We stopped facepalming')\n  facepalmHard() {}\n\n  @deprecate('We stopped facepalming', { url: 'http://knowyourmeme.com/memes/facepalm' })\n  facepalmHarder() {}\n}\n\nlet person = new Person();\n\nperson.facepalm();\n// DEPRECATION Person#facepalm: This function will be removed in future versions.\n\nperson.facepalmHard();\n// DEPRECATION Person#facepalmHard: We stopped facepalming\n\nperson.facepalmHarder();\n// DEPRECATION Person#facepalmHarder: We stopped facepalming\n//\n//     See http://knowyourmeme.com/memes/facepalm for more details.\n//\n```\n\n### @debounce\n\nCreates a new debounced function which will be invoked after `wait` milliseconds since the time it was invoked. Default timeout is 300 ms.\n\nOptional boolean second argument allows to trigger function on the leading instead of the trailing edge of the wait interval. Implementation is inspired by similar method from [UnderscoreJS](http://underscorejs.org/#debounce).\n\n```js\nimport { debounce } from 'core-decorators';\n\nclass Editor {\n\n  content = '';\n\n  @debounce(500)\n  updateContent(content) {\n    this.content = content;\n  }\n}\n```\n\n### @throttle\n\nCreates a new throttled function which will be invoked in every `wait` milliseconds. Default timeout is 300 ms.\n\nSecond argument is optional options:\n\n- `leading`: default to `true`, allows to trigger function on the leading.\n- `trailing`: default to `true`, allows to trigger function on the trailing edge of the wait interval.\n\nImplementation is inspired by similar method from [UnderscoreJS](http://underscorejs.org/#throttle).\n\n```js\nimport { throttle } from 'core-decorators';\n\nclass Editor {\n\n  content = '';\n\n  @throttle(500, {leading: false})\n  updateContent(content) {\n    this.content = content;\n  }\n}\n```\n\n### @suppressWarnings\n\nSuppresses any JavaScript `console.warn()` call while the decorated function is called. (i.e. on the stack)\n\nWill _not_ suppress warnings triggered in any async code within.\n\n```js\nimport { suppressWarnings } from 'core-decorators';\n\nclass Person {\n  @deprecated\n  facepalm() {}\n\n  @suppressWarnings\n  facepalmWithoutWarning() {\n    this.facepalm();\n  }\n}\n\nlet person = new Person();\n\nperson.facepalmWithoutWarning();\n// no warning is logged\n```\n\n### @enumerable\n\nMarks a method as being enumerable. Note that instance properties are _already_ enumerable, so this is only useful for methods.\n\n```js\nimport { enumerable } from 'core-decorators';\n\nclass Meal {\n  pay() {}\n\n  @enumerable\n  eat() {}\n}\n\nvar dinner = new Meal();\nfor (var key in dinner) {\n  key;\n  // \"eat\" only, not \"pay\"\n}\n\n```\n\n### @nonenumerable\n\nMarks a property as not being enumerable. Note that class methods are _already_ nonenumerable, so this is only useful for instance properties.\n\n```js\nimport { nonenumerable } from 'core-decorators';\n\nclass Meal {\n  entree = 'steak';\n\n  @nonenumerable\n  cost = 20.99;\n}\n\nvar dinner = new Meal();\nfor (var key in dinner) {\n  key;\n  // \"entree\" only, not \"cost\"\n}\n\nObject.keys(dinner);\n// [\"entree\"]\n\n```\n\n### @nonconfigurable\n\nMarks a property or method so that it cannot be deleted; also prevents it from being reconfigured via `Object.defineProperty`, but **this may not always work how you expect** due to a quirk in JavaScript itself, not this library. Adding the `@readonly` decorator fixes it, but at the cost of obviously making the property readonly (aka `writable: false`). [You can read more about this here.](https://github.com/jayphelps/core-decorators.js/issues/58)\n\n```js\nimport { nonconfigurable } from 'core-decorators';\n\nclass Foo {\n  @nonconfigurable\n  @readonly\n  bar() {};\n}\n\nObject.defineProperty(Foo.prototype, 'bar', {\n  value: 'I will error'\n});\n// Cannot redefine property: bar\n\n```\n\n### @decorate\n\nImmediately applies the provided function and arguments to the method, allowing you to wrap methods with arbitrary helpers like [those provided by lodash](https://lodash.com/docs#after). The first argument is the function to apply, all further arguments will be passed to that decorating function.\n\n```js\nimport { decorate } from 'core-decorators';\nimport { memoize } from 'lodash';\n\nvar count = 0;\n\nclass Task {\n  @decorate(memoize)\n  doSomethingExpensive(data) {\n    count++;\n    // something expensive;\n    return data;\n  }\n}\n\nvar task = new Task();\nvar data = [1, 2, 3];\n\ntask.doSomethingExpensive(data);\ntask.doSomethingExpensive(data);\n\ncount === 1;\n// true\n```\n\n### @lazyInitialize\n\nPrevents a property initializer from running until the decorated property is actually looked up. Useful to prevent excess allocations that might otherwise not be used, but be careful not to over-optimize things.\n\n```js\nimport { lazyInitialize } from 'core-decorators';\n\nfunction createHugeBuffer() {\n  console.log('huge buffer created');\n  return new Array(1000000);\n}\n\nclass Editor {\n  @lazyInitialize\n  hugeBuffer = createHugeBuffer();\n}\n\nvar editor = new Editor();\n// createHugeBuffer() has not been called yet\n\neditor.hugeBuffer;\n// logs 'huge buffer created', now it has been called\n\neditor.hugeBuffer;\n// already initialized and equals our buffer, so\n// createHugeBuffer() is not called again\n```\n\n### @mixin (alias: @mixins)\n\nMixes in all property descriptors from the provided Plain Old JavaScript Objects (aka POJOs) as arguments. Mixins are applied in the order they are passed, but do **not** override descriptors already on the class, including those inherited traditionally.\n\n```js\nimport { mixin } from 'core-decorators';\n\nconst SingerMixin = {\n  sing(sound) {\n    alert(sound);\n  }\n};\n\nconst FlyMixin = {\n  // All types of property descriptors are supported\n  get speed() {},\n  fly() {},\n  land() {}\n};\n\n@mixin(SingerMixin, FlyMixin)\nclass Bird {\n  singMatingCall() {\n    this.sing('tweet tweet');\n  }\n}\n\nvar bird = new Bird();\nbird.singMatingCall();\n// alerts \"tweet tweet\"\n\n```\n\n### @time\n\nUses `console.time` and `console.timeEnd` to provide function timings with a unique label whose default prefix is `ClassName.method`.  Supply a first argument to override the prefix:\n\n```js\nclass Bird {\n  @time('sing')\n  sing() {\n  }\n}\n\nvar bird = new Bird();\nbird.sing(); // console.time label will be 'sing-0'\nbird.sing(); // console.time label will be 'sing-1'\n```\n\nWill polyfill `console.time` if the current environment does not support it. You can also supply a custom `console` object as the second argument with the following methods:\n\n* `myConsole.time(label)`\n* `myConsole.timeEnd(label)`\n* `myConsole.log(value)`\n\n```js\nlet myConsole = {\n  time: function(label) { /* custom time() method */ },\n  timeEnd: function(label) { /* custom timeEnd method */ },\n  log: function(str) { /* custom log method */ }\n}\n```\n\n### @profile\n\nUses `console.profile` and `console.profileEnd` to provide function profiling with a unique label whose default prefix is `ClassName.method`. Supply a first argument to override the prefix:\n\n```js\nclass Bird {\n  @profile('sing')\n  sing() {\n  }\n}\n\nvar bird = new Bird();\nbird.sing(); // Adds a profile with label sing and marked as run 1\nbird.sing(); // Adds a profile with label sing and marked as run 2\n```\n\nBecause profiling is expensive, you may not want to run it every time the function is called. Supply a second argument of `true` to have the profiling only run once:\n\n```js\nclass Bird {\n  @profile(null, true)\n  sing() {\n  }\n}\n\nvar bird = new Bird();\nbird.sing(); // Adds a profile with label Bird.sing\nbird.sing(); // Does nothing\n```\n\nProfiling is currently only supported in Chrome 53+, Firefox, and Edge. Unfortunately this feature can't be polyfilled or faked, so if used in an unsupported browser or Node.js then this decorator will automatically disable itself.\n\n### @extendDescriptor\n\nExtends the new property descriptor with the descriptor from the super/parent class prototype. Although useful in various circumstances, it's particularly helpful to address the fact that getters and setters share a single descriptor so overriding only a getter or only a setter will blow away the other, without this decorator.\n\n```js\nclass Base {\n  @nonconfigurable\n  get foo() {\n    return `hello ${this._foo}`;\n  }\n}\n\nclass Derived extends Base {\n  @extendDescriptor\n  set foo(value) {\n    this._foo = value;\n  }\n}\n\nconst derived = new Derived();\nderived.foo = 'bar';\nderived.foo === 'hello bar';\n// true\n\nconst desc = Object.getOwnPropertyDescriptor(Derived.prototype, 'foo');\ndesc.configurable === false;\n// true\n```\n\n### applyDecorators() helper\n\nThe `applyDecorators()` helper can be used when you don't have language support for decorators like in Babel 6 or even with vanilla ES5 code without a transpiler.\n\n```js\nclass Foo {\n  getFoo() {\n    return this;\n  }\n}\n\n// This works on regular function prototypes\n// too, like `function Foo() {}`\napplyDecorators(Foo, {\n  getFoo: [autobind]\n});\n\nlet foo = new Foo();\nlet getFoo = foo.getFoo;\ngetFoo() === foo;\n// true\n```\n\n# Future Compatibility\nSince most people can't keep up to date with specs, it's important to note that the spec is in-flux and subject to breaking changes. For the most part, these changes will _probably_ be transparent to consumers of this project--that said, core-decorators has not yet reached 1.0 and may in fact introduce breaking changes. If you'd prefer not to receive these changes, be sure to lock your dependency to [PATCH](http://semver.org/). You can track the progress of core-decorators@1.0.0 in the [The Road to 1.0](https://github.com/jayphelps/core-decorators.js/issues/15) ticket.\n\n# Decorator Order Sometimes Matters\nWhen using multiple decorators on a class, method, or property the order of the decorators sometimes matters. This is a neccesary caveat of decorators because otherwise certain cool features wouldn't be possible. The most common example of this is using `@autobind` and any [Higher-Order Component (HOC)](https://medium.com/@dan_abramov/mixins-are-dead-long-live-higher-order-components-94a0d2f9e750) decorator, e.g. Redux's `@connect`. You must `@autobind` your class first before applying the `@connect` HOC.\n\n```js\n@connect()\n@autobind\nclass Foo extends Component {}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/jayphelps/core-decorators.js.git"
  },
  "scripts": {
    "build": "babel --out-dir lib src",
    "build-bower": "babel-node scripts/build-bower.js",
    "build-es": "BABEL_ENV=es babel --out-dir es src",
    "test": "npm run build && mocha --compilers js:babel-core/register --require babel-polyfill \"test/**/*.spec.js\""
  },
  "version": "0.17.0"
}
